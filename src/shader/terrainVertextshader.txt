#version 400 core

in vec3 position;
in vec2 texCoords;
in vec3 normals;


out vec2 pass_texCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];


const float density=0.0035;
const float gradient=5;

void main(void){
	
	
	
	vec4 worldVector=transformationMatrix * vec4(position,1.0);

	vec4 positionRelativeToCam=viewMatrix * worldVector;
	gl_Position = projectionMatrix * positionRelativeToCam ;
	pass_texCoords=texCoords;
	
	
	surfaceNormal=(transformationMatrix * vec4(normals,0.0)).xyz;
	for (int i=0;i<4;i++){
		toLightVector[i] = lightPosition[i] - worldVector.xyz;
	}
	toCameraVector=(inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz- worldVector.xyz;
	
	float distance=length(positionRelativeToCam.xyz);
	visibility=exp(-pow((density*distance),gradient));
	visibility=clamp(visibility,0.0,1.0);
	
}